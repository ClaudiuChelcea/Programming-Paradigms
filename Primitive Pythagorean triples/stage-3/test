#lang racket

(require "ppt.rkt")

(define (a1 e f) (+ (* e e) (* 2 f e)))
(define (b1 e f) (+ (* 2 f f) (* 2 f e)))
(define (c1 e f) (+ (* 2 f f) (* e e) (* 2 f e)))

(define (a2 e f) (- (* e e) (* 2 f e)))
(define (b2 e f) (- (* 2 f f) (* 2 f e)))
(define (c2 e f) (+ (* 2 f f) (* e e) (* -2 f e)))

(define (a3 e f) (- (* f f) (* e e)))
(define (b3 e f) (* 2 f e))
(define (c3 e f) (+ (* f f) (* e e)))

(define (key n)
  (let [(ans (get-nth-quadruple n))]
  (let [(e (cadr ans)) (f (caddr ans))]
     (let [(before-reduction (list (a1 e f) (b1 e f) (c1 e f) (a2 e f) (b2 e f) (c2 e f) (a3 e f) (b3 e f) (c3 e f)))]
       (map (lambda (element) (let [(partial-answer (remainder element 27))]
                                (if (> 0 partial-answer)
                                    (+ partial-answer 27)
                                    partial-answer))) before-reduction)))))

(key 3)